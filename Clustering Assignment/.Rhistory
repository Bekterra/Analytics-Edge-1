# PREDICTING MEDICAL COSTS WITH CLUSTER-THEN-PREDICT
pred.test1 = predict(lm1, test1)
source('~/.active-rstudio-document', echo=TRUE)
hist(claims$reimbursement2009)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
claims$reimbursement2008 = log(claims$reimbursement2008+1)
claims$reimbursement2009 = log(claims$reimbursement2009+1)
hist(claims$reimbursement2009)
x=c(table(claims$reimbursement2009<=0)[2], dim(claims)[1])
set.seed(144)
spl = sample(1:nrow(claims), size=0.7*nrow(claims))
train = claims[spl,]
test = claims[-spl,]
lm.claims=lm(reimbursement2009~., data=train)
summary(lm.claims)
predictClaims=predict(lm.claims, newdata=test)
str(predictClaims)
sqrt(sum((test$reimbursement2009 - predictClaims)^2)/length(predictClaims))
train.limited = train
train.limited$reimbursement2009 = NULL
test.limited = test
test.limited$reimbursement2009 = NULL
library(caret)
preproc = preProcess(train.limited)
train.norm = predict(preproc, train.limited)
test.norm = predict(preproc, test.limited)
mean(test.norm$arthritis)
k = 3
set.seed(144)
km = kmeans(train.norm, centers = k, iter.max=1000)
claimVec2=c(tapply(train$age, km$cluster, mean),
tapply(train$alzheimers, km$cluster, mean),
tapply(train$arthritis, km$cluster, mean),
tapply(train$cancer, km$cluster, mean),
tapply(train$copd, km$cluster, mean),
tapply(train$depression, km$cluster, mean),
tapply(train$diabetes, km$cluster, mean),
tapply(train$heart.failure, km$cluster, mean),
tapply(train$ihd, km$cluster, mean),
tapply(train$kidney, km$cluster, mean),
tapply(train$osteoporosis, km$cluster, mean),
tapply(train$stroke, km$cluster, mean),
tapply(train$reimbursement2008, km$cluster, mean))
dim(claimVec2) = c(3, 13)
colnames(claimVec2) = c("age","alzheimers","arthritis","cancer","copd","depression","diabetes","heart.failure","ihd","kidney","osteoporosis","stroke","reimbursement2008")
summary(train)
claimVec2
library(flexclust)
km.kcca = as.kcca(km, train.norm)
cluster.train = predict(km.kcca)
cluster.test = predict(km.kcca, newdata=test.norm)
table(cluster.test)[2]
train1 = subset(train, cluster.train == 1)
train2 = subset(train, cluster.train == 2)
train3 = subset(train, cluster.train == 3)
test1 = subset(test, cluster.test == 1)
test2 = subset(test, cluster.test == 2)
test3 = subset(test, cluster.test == 3)
lm1=lm(reimbursement2009~., data=train1)
lm2=lm(reimbursement2009~., data=train2)
lm3=lm(reimbursement2009~., data=train3)
pred.test1 = predict(lm1, test1)
pred.test2 = predict(lm2, test2)
pred.test3 = predict(lm3, test3)
dim(pred.test1)
length(pred.test1)
mean(pred.test1)
mean(pred.test2)
mean(pred.test3)
sqrt(sum((test1$reimbursement2009 - pred.test1)^2)/(length(pred.test1)))
sqrt(sum((test1$reimbursement2009 - pred.test1)^2)/(length(pred.test1)))
sqrt(sum((test2$reimbursement2009 - pred.test2)^2)/(length(pred.test2)))
sqrt(sum((test3$reimbursement2009 - pred.test3)^2)/(length(pred.test3)))
all.predictions = c(pred.test1, pred.test2, pred.test3)
all.outcomes = c(test1$reimbursement2009, test2$reimbursement2009, test3$reimbursement2009)
sqrt(sum((all.outcomes - all.predictions)^2)/(length(all.outcomes)))
sqrt(sum((all.outcomes - all.predictions)^2)/137402)
set.seed(144)
spl = sample(1:nrow(claims), size=0.7*nrow(claims))
train = claims[spl,]
test = claims[-spl,]
source('~/.active-rstudio-document', echo=TRUE)
sqrt(sum((all.outcomes - all.predictions)^2)/(length(all.outcomes)))
